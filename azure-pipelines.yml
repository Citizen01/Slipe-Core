trigger:
- master
- development

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

- task: DownloadBuildArtifacts@0
  displayName: 'Download CLI'
  inputs:
    buildType: 'specific'
    project: '7672f4c6-33ca-42f2-bfd8-1f88e64fbda5'
    pipeline: '1'
    buildVersionToDownload: 'latestFromBranch'
    branchName: 'refs/heads/development'
    downloadType: 'single'
    artifactName: 'drop'
    downloadPath: '$(Build.SourcesDirectory)'

- task: ExtractFiles@1
  displayName: 'Extract CLI'
  inputs:
    archiveFilePatterns: '$(Build.SourcesDirectory)*.zip'
    destinationFolder: '$(Build.SourcesDirectory)'
    cleanDestinationFolder: false

- task: CmdLine@2
  displayName: 'Debug'
  inputs:
    script: 'sudo apt-get install tree && pwd && tree'

- task: CmdLine@2
  displayName: 'Sanitize install.sh'
  inputs:
    script: 'sed -i ''s/\r//g'' $(Build.SourcesDirectory)/install.sh'

- task: CmdLine@2
  displayName: 'Install CLI'
  inputs:
    script: 'sudo bash $(Build.SourcesDirectory)/install.sh'

- task: CmdLine@2
  displayName: 'Debug'
  inputs:
    script: 'pwd'

- task: CmdLine@2
  displayName: 'Debug'
  inputs:
    script: 'slipe'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: 'restore'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/*.sln'
    arguments: '--output $(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'publish artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'